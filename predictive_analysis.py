# -*- coding: utf-8 -*-
"""predictive analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1diIIQJHW0cCD28R2njmtaD6duVOe8Ppc

### Name : Ridopandi Sinaga
### Title : Mobile Price Classification
### Laggle dataset: https://www.kaggle.com/datasets/iabhishekofficial/mobile-price-classification
### Problem: Classification

## --------------------------------------------------------------------------------------------------------------------------------------

## Import library yang diperlukan
"""

import pandas as pd
import os, zipfile, shutil, PIL
from google.colab import files
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pydotplus
import matplotlib.pyplot as plt
import matplotlib.image as pltimg
import matplotlib.patches as mpatches

from sklearn import datasets, linear_model, metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge
from sklearn.utils import resample
from sklearn.linear_model import LogisticRegression
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import f_classif
import scipy.stats as stats

"""## Dataset"""

!pip install -q kaggle

uploaded = files.upload()

!chmod 600 /content/kaggle.json

! KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d iabhishekofficial/mobile-price-classification

local_zip = '/content/mobile-price-classification.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

# Import
data = pd.read_csv('/content/train.csv')

# Cek dataset
data

# Cek keterangan dataset
data.info()

data.describe()

"""## Exploratory Data Anaylsis"""

cs1 = ['#b788ca', '#9771b6', '#7e659f', '#582e67']
labelharga = ["Murah","Menengah Murah","Menegah Mahal","Mahal"]

"""### Plot Data Price Range"""

plt.figure(figsize=(8,6))
price = sns.countplot(data.price_range, palette=cs1)
plt.title('Data Harga Telepon Seluler', fontsize=18)
plt.ylabel('Jumlah Data', fontsize=14)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

"""### Plot RAM vs Price Range"""

plt.figure(figsize=(8,6))

data.groupby(['price_range'])['ram'].mean().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata RAM Berdasarkan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata RAM (Mega Bytes)', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

plt.figure(figsize=(8,6))

snsplot1 = sns.boxplot(x="price_range", y="ram", data=data, palette=cs1)
plt.title('Perbandingan RAM dengan Harga Telepon Seluler', fontsize=18)
plt.ylabel('Ukuran RAM (Mega Bytes)', fontsize=14)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

"""### Plot Battery Power vs Price Range"""

plt.figure(figsize=(8,6))

data.groupby(['price_range'])['battery_power'].mean().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Daya Baterai Berdasarkan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata Daya Baterai (mAh)', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

plt.figure(figsize=(8,6))

snsplot2 = sns.boxplot(x="price_range", y="battery_power", data=data, palette=cs1)
plt.title('Perbandingan Daya Baterai dengan Harga Telepon Seluler', fontsize=18)
plt.ylabel('Daya Baterai (mAh)', fontsize=14)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

"""### Plot Screen Size vs Price Range"""

plt.figure(figsize=(8,6))
lbl1 = mpatches.Patch(color='#b788ca', label='Lebar (Pixel)')
lbl2 = mpatches.Patch(color='#9771b6', label='Tinggi (Pixel)')

data.groupby(['price_range'])['px_width','px_height'].mean().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Ukuran Layar Berdasarkan Harga Telepon Seluler', fontsize=14)
plt.xlabel('Harga Telepon Seluler', fontsize=10)
plt.ylabel('Rata-rata Ukuran Layar (Pixel)', fontsize=10)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=8)
plt.yticks(fontsize=8)

plt.legend(handles = [lbl1,lbl2], loc = 'upper left')

plt.show()

"""### Plot Data 3G"""

plt.figure(figsize=(8,6))

labels = ["3G",'Tidak 3G']
values = data['three_g'].value_counts().values
cs2 = ['#641d9b','#a384da']
plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=cs2, textprops={'fontsize': 14})
plt.title('Spesifikasi 3G Telepon Seluler', fontsize=18)

plt.show()

data_3G_1 = data[(data.three_g == 1)]
data_3G_1

data_3G_0 = data[(data.three_g == 0)]
data_3G_0

plt.figure(figsize=(8,6))

data_3G_1.groupby(['price_range'])['three_g'].value_counts().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Telepon Seluler 3G dengan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata Telepon Seluler 3G', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

plt.figure(figsize=(8,6))

data_3G_0.groupby(['price_range'])['three_g'].value_counts().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Telepon Seluler Tidak 3G dengan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata Telepon Seluler Tidak 3G', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

"""### Plot Data 4G"""

plt.figure(figsize=(8,6))

labels = ["4G",'Tidak 4G']
values = data['four_g'].value_counts().values
cs2 = ['#641d9b','#a384da']
plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=cs2, textprops={'fontsize': 14})
plt.title('Spesifikasi 4G Telepon Seluler', fontsize=18)

plt.show()

data_4G_1 = data[(data.four_g == 1)]
data_4G_1

data_4G_0 = data[(data.four_g == 0)]
data_4G_0

plt.figure(figsize=(8,6))

data_4G_1.groupby(['price_range'])['four_g'].value_counts().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Telepon Seluler 4G dengan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata Telepon Seluler 4G', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

plt.figure(figsize=(8,6))

data_4G_0.groupby(['price_range'])['four_g'].value_counts().plot(kind = 'bar', color = cs1, rot = 0)
plt.title('Rata-rata Telepon Seluler Tidak 4G dengan Harga Telepon Seluler', fontsize=18)
plt.xlabel('Harga Telepon Seluler', fontsize=14)
plt.ylabel('Rata-rata Telepon Seluler Tidak 4G', fontsize=14)
plt.xticks([0, 1, 2, 3], ['Murah', 'Menengah', 'Mahal', 'Sangat Mahal'], fontsize=12)
plt.yticks(fontsize=12)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2)
fig.set_figheight(8)
fig.set_figwidth(6)
fig.tight_layout()
#fig.suptitle('Horizontally stacked subplots')

#cs1 = ['#b788ca', '#9771b6', '#7e659f', '#582e67']
cs1_3G = ['#b788ca', '#9771b6']
cs1_4G = ['#7e659f', '#582e67']
cs2 = ['#641d9b','#a384da']

label_3G = ["3G",'Tidak 3G']
value_3G = data['three_g'].value_counts().values
ax1.pie(value_3G, labels=label_3G, autopct='%1.1f%%', startangle=90, colors=cs2, textprops={'fontsize': 14})
#ax1.title('Spesifikasi 3G Telepon Seluler', fontsize=18)

label_4G = ["4G",'Tidak 4G']
value_4G = data['four_g'].value_counts().values
ax2.pie(value_4G, labels=label_4G, autopct='%1.1f%%', startangle=90, colors=cs2, textprops={'fontsize': 14})
#ax2.title('Spesifikasi 4G Telepon Seluler', fontsize=18)

plt.subplots_adjust(right=1.5)

plt.title('Spesifikasi 3G dan 4G Telepon Seluler', x=0, y=0.925, fontsize=20)
plt.show()

"""### Plot Battery Power vs Touch Screen"""

plt.figure(figsize=(8,6))
data.groupby(['touch_screen'])['battery_power'].mean().plot(kind = 'bar', color = cs1, rot = 0)
plt.show()

plt.figure(figsize=(8,6))
snsplot2 = sns.boxplot(x="touch_screen", y="battery_power", data=data, palette=cs1)
plt.show()

"""## Data Cleaning"""

# Cek jumlah data missing tiap kolom
data.isna().sum()

# Cek jumlah data terduplikasi pada dataset
data.duplicated().sum()

# Drop (menghilangkan) data missing dan duplikat dari dataset
data = data.dropna().reset_index(drop=True)
data = data.drop_duplicates()
data

# Cek outlier dari dataset
data.plot(kind="box",subplots=True,layout=(10,10),sharex=False,sharey=False,figsize=(20,20))
plt.show()

# Cek outlier dari data 'px_height'
data.px_height.plot(kind="box")
plt.show()

# Cek outlier dari data 'fc'
data.fc.plot(kind="box")
plt.show()

# Plot buat di PPT

plt.figure(figsize=(4,4))

data.fc.plot(kind="box")
plt.title('Outlier untuk kolom "fc"', fontsize=16)
plt.xlabel('kolom "fc"', fontsize=12)
plt.ylabel('Data pada kolom "fc"', fontsize=12)

plt.show()

plt.figure(figsize=(4,4))

data.px_height.plot(kind="box")
plt.title('Outlier untuk kolom "px_height"', fontsize=16)
plt.xlabel('kolom "px_height"', fontsize=12)
plt.ylabel('Data pada kolom "px_height"', fontsize=12)

plt.show()

fig, (ax1, ax2) = plt.subplots(1, 2)
fig.set_figheight(4)
fig.set_figwidth(4)
fig.tight_layout()
#fig.suptitle('Horizontally stacked subplots')

ax1.boxplot(data['fc'])
ax1.set_xlabel('kolom "fc" (Front Camera)', fontsize=12)
ax1.set_ylabel('Data pada kolom "fc"', fontsize=12)
ax1.set_xticklabels(['fc'])

ax2.boxplot(data['px_height'])
ax2.set_xlabel('kolom "px_height" (Pixel Height)', fontsize=12)
ax2.set_ylabel('Data pada kolom "px_height"', fontsize=12)
ax2.set_xticklabels(['px_height'])

plt.subplots_adjust(right=1.5)

plt.title('Outlier dari Data', x=-0.25, y=1.025, fontsize=20)
plt.show()



def showing_boxplot(data, features):
    num_plots = len(features)
    num_cols = 4  # Jumlah kolom yang ingin ditampilkan secara horizontal

    # Hitung jumlah baris yang diperlukan berdasarkan jumlah grafik dan kolom yang ingin ditampilkan
    num_rows = (num_plots + num_cols - 1) // num_cols

    # Buat subplot dengan jumlah baris dan kolom yang sesuai
    fig, axes = plt.subplots(num_rows, num_cols, squeeze=False, figsize=(16, 4*num_rows))

    for i, c in enumerate(features):
        # Hitung indeks baris dan kolom
        row = i // num_cols
        col = i % num_cols

        # 1st quartile
        Q1 = np.percentile(data[c], 25)
        # 3rd quartile
        Q3 = np.percentile(data[c], 75)
        # IQR
        IQR = Q3 - Q1
        # Outlier step
        outlier_step = IQR * 1.5
        # detect outlier and their indices
        outlier_list_col = data[(data[c] < Q1 - outlier_step) | (data[c] > Q3 + outlier_step)].index

        # Group data by "price_range" and plot boxplot
        data.boxplot(column=c, by="price_range", ax=axes[row, col])
        axes[row, col].set_title(c)  # Menambahkan judul grafik

    # Menghilangkan subplot yang tidak digunakan
    for i in range(num_plots, num_rows*num_cols):
        row = i // num_cols
        col = i % num_cols
        fig.delaxes(axes[row, col])

    plt.tight_layout()
    plt.show()

showing_boxplot(data, ["battery_power", "clock_speed", "fc", "int_memory", "m_dep", "mobile_wt",
                      "n_cores", "pc", "px_height", "px_width", "ram", "sc_h", "sc_w", "talk_time"])

showing_boxplot(data, ["battery_power","px_height","px_width","ram"])

q1 = data["ram"].quantile(0.25)
q3 = data["ram"].quantile(0.75)

iqr = q3-q1 #Interquartile range
fence_low  = q1-1.5*iqr
fence_high = q3+1.5*iqr

data.loc[(data["ram"] < fence_low) | (data["ram"] > fence_high)]



showing_boxplot(data,["battery_power","clock_speed","fc","int_memory","m_dep","mobile_wt","n_cores","pc","px_height","px_width","ram","sc_h","sc_w","talk_time"])

showing_boxplot(data,["battery_power","px_height","px_width","ram"])

# Cek outlier dari data 'ram' menggunakan Z-Score
data[(np.abs(stats.zscore(data["ram"])) >= 3)]

# Cek outlier dari data 'px_height' menggunakan Z-Score
data[(np.abs(stats.zscore(data["px_height"])) >= 3)]

# Cek outlier dari data 'sc_w' menggunakan Z-Score
data[(np.abs(stats.zscore(data["sc_w"])) >= 3)]

data[(np.abs(stats.zscore(data['fc'])) >= 3)]
data.boxplot(column='fc',by="price_range")
plt.show()

# Cek outlier dari data 'fc' menggunakan Z-Score
data[(np.abs(stats.zscore(data["fc"])) >= 3)]

# Menghilangkan data outlier dari 'fc'
data.drop(data[(np.abs(stats.zscore(data["fc"])) >= 3)].index, inplace=True)
data



"""## Corelation"""

# Plot korelasi dari dataset menggunakan heatmap
plt.figure(figsize=(15,15))
sns.heatmap(data.corr(), annot = True)

# Ambil feature dengan batas korelasi
cor_target = abs(data.corr()['price_range'])

features = cor_target[cor_target>0.08]
features

data_feature = data[['battery_power','px_height','px_width',
               'ram']]
data_target = data[['price_range']]

data_feature

data_target

"""## Modelling

### Algoritma : Random Forest, Decision Tree, Logistic Regression, SVM, KNN

### Model tanpa fitur terpilih (Training 60%, Test 40%)
"""

# Split train-test tanpa fitur terpilih
X = data.loc[:, data.columns != 'price_range']
y = data["price_range"]

# Split train-test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,
                                                    random_state=1)

# Random Forest
classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1, max_depth=5,
                                       n_estimators=100, oob_score=True)
classifier_rf.fit(X_train, y_train)

# Decision Tree
dtree = tree.DecisionTreeClassifier()
dtree.fit(X_train, y_train)

# Logistic Regression
lr = LogisticRegression()
lr.fit(X_train, y_train)

# Support Vector Machine (SVM)
svc = SVC()
svc.fit(X_train, y_train)

# K-Nearest Neighbour (KNN)
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

# Predict
y_rf = classifier_rf.predict(X_test)
y_dtree = dtree.predict(X_test)
y_lr = lr.predict(X_test)
y_svm = svc.predict(X_test)
y_knn = knn.predict(X_test)

## Accuracy Score
print(accuracy_score(y_test, y_rf))
print(accuracy_score(y_test, y_dtree))
print(accuracy_score(y_test, y_lr))
print(accuracy_score(y_test, y_svm))
print(accuracy_score(y_test, y_knn))

# Confusion Matrix
print(confusion_matrix(y_test, y_lr))
print(confusion_matrix(y_test, y_dtree))
print(confusion_matrix(y_test, y_rf))
print(confusion_matrix(y_test, y_svm))
print(confusion_matrix(y_test, y_knn))

print(classification_report(y_test, y_rf))
print(classification_report(y_test, y_dtree))
print(classification_report(y_test, y_lr))
print(classification_report(y_test, y_svm))
print(classification_report(y_test, y_knn))

"""### Model dengan fitur terpilih (Training 60%, Test 40%)"""

# x y berdasarkan korelasi
X = data_feature
y = data_target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,
                                                    random_state=1)

classifier_rf.fit(X_train, y_train)
dtree.fit(X_train, y_train)
lr.fit(X_train, y_train)
svc.fit(X_train, y_train)
knn.fit(X_train, y_train)

# Predict
y_rf = classifier_rf.predict(X_test)
y_dtree = dtree.predict(X_test)
y_lr = lr.predict(X_test)
y_svm = svc.predict(X_test)
y_knn = knn.predict(X_test)

## Accuracy Score
print(accuracy_score(y_test, y_rf))
print(accuracy_score(y_test, y_dtree))
print(accuracy_score(y_test, y_lr))
print(accuracy_score(y_test, y_svm))
print(accuracy_score(y_test, y_knn))

# Confusion Matrix
print(confusion_matrix(y_test, y_lr))
print(confusion_matrix(y_test, y_dtree))
print(confusion_matrix(y_test, y_rf))
print(confusion_matrix(y_test, y_svm))
print(confusion_matrix(y_test, y_knn))

print(classification_report(y_test, y_rf))
print(classification_report(y_test, y_dtree))
print(classification_report(y_test, y_lr))
print(classification_report(y_test, y_svm))
print(classification_report(y_test, y_knn))

"""### Model dengan fitur terpilih (Training 70%, Test 30%)"""

X = data_feature
y = data_target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
                                                    random_state=1)

classifier_rf.fit(X_train, y_train)
dtree.fit(X_train, y_train)
lr.fit(X_train, y_train)
svc.fit(X_train, y_train)
knn.fit(X_train, y_train)

# Predict
y_rf = classifier_rf.predict(X_test)
y_dtree = dtree.predict(X_test)
y_lr = lr.predict(X_test)
y_svm = svc.predict(X_test)
y_knn = knn.predict(X_test)

print(accuracy_score(y_test, y_rf))
print(accuracy_score(y_test, y_dtree))
print(accuracy_score(y_test, y_lr))
print(accuracy_score(y_test, y_svm))
print(accuracy_score(y_test, y_knn))

# Confusion Matrix
print(confusion_matrix(y_test, y_lr))
print(confusion_matrix(y_test, y_dtree))
print(confusion_matrix(y_test, y_rf))
print(confusion_matrix(y_test, y_svm))
print(confusion_matrix(y_test, y_knn))

# Classification Report
print(classification_report(y_test, y_rf))
print(classification_report(y_test, y_dtree))
print(classification_report(y_test, y_lr))
print(classification_report(y_test, y_svm))
print(classification_report(y_test, y_knn))

"""### Model dengan fitur terpilih (Training 80%, Test 20%)"""

X = data_feature
y = data_target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,
                                                    random_state=1)

classifier_rf.fit(X_train, y_train)
dtree.fit(X_train, y_train)
lr.fit(X_train, y_train)
svc.fit(X_train, y_train)
knn.fit(X_train, y_train)

# Predict
y_rf = classifier_rf.predict(X_test)
y_dtree = dtree.predict(X_test)
y_lr = lr.predict(X_test)
y_svm = svc.predict(X_test)
y_knn = knn.predict(X_test)

print(accuracy_score(y_test, y_rf))
print(accuracy_score(y_test, y_dtree))
print(accuracy_score(y_test, y_lr))
print(accuracy_score(y_test, y_svm))
print(accuracy_score(y_test, y_knn))

# Confusion Matrix
print(confusion_matrix(y_test, y_lr))
print(confusion_matrix(y_test, y_dtree))
print(confusion_matrix(y_test, y_rf))
print(confusion_matrix(y_test, y_svm))
print(confusion_matrix(y_test, y_knn))

# Classification Report
print(classification_report(y_test, y_rf))
print(classification_report(y_test, y_dtree))
print(classification_report(y_test, y_lr))
print(classification_report(y_test, y_svm))
print(classification_report(y_test, y_knn))

"""## Best Feature Number for Each Machine Learning Algorithm"""

X = data.loc[:, data.columns != 'price_range']
y = data["price_range"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,
                                                    random_state=1)

# Cek feature untuk Random Forest
accuracy_list_train = []
k = np.arange(1, 21, 1)
for each in k:
    X_new = SelectKBest(f_classif, k=each).fit_transform(X_train, y_train)
    classifier_rf.fit(X_new, y_train)
    accuracy_list_train.append(classifier_rf.score(X_new, y_train))

tick = np.arange(0, 21, 1)
plt.figure(figsize=(10, 5))
plt.plot(k, accuracy_list_train, color="green", label="train")
plt.xlabel("k values")
plt.ylabel("train accuracy")
plt.xlim(0, 20)
plt.xticks(tick)
plt.legend()
plt.grid()
plt.show()

# Cek feature untuk Decision Tree
accuracy_list_train = []
k = np.arange(1, 21, 1)
for each in k:
    X_new = SelectKBest(f_classif, k=each).fit_transform(X_train, y_train)
    dtree.fit(X_new, y_train)
    accuracy_list_train.append(dtree.score(X_new, y_train))

tick = np.arange(0, 21, 1)
plt.figure(figsize=(10, 5))
plt.plot(k, accuracy_list_train, color="green", label="train")
plt.xlabel("k values")
plt.ylabel("train accuracy")
plt.xlim(0, 20)
plt.xticks(tick)
plt.legend()
plt.grid()
plt.show()

# Cek feature untuk Logistic Regression
accuracy_list_train = []
k = np.arange(1, 21, 1)
for each in k:
    X_new = SelectKBest(f_classif, k=each).fit_transform(X_train, y_train)
    lr.fit(X_new, y_train)
    accuracy_list_train.append(lr.score(X_new, y_train))

tick = np.arange(0, 21, 1)
plt.figure(figsize=(10, 5))
plt.plot(k, accuracy_list_train, color="green", label="train")
plt.xlabel("k values")
plt.ylabel("train accuracy")
plt.xlim(0, 20)
plt.xticks(tick)
plt.legend()
plt.grid()
plt.show()

# Cek feature untuk SVM
accuracy_list_train = []
k = np.arange(1, 21, 1)
for each in k:
    X_new = SelectKBest(f_classif, k=each).fit_transform(X_train, y_train)
    svc.fit(X_new, y_train)
    accuracy_list_train.append(svc.score(X_new, y_train))

tick = np.arange(0, 21, 1)
plt.figure(figsize=(10, 5))
plt.plot(k, accuracy_list_train, color="green", label="train")
plt.xlabel("k values")
plt.ylabel("train accuracy")
plt.xlim(0, 20)
plt.xticks(tick)
plt.legend()
plt.grid()
plt.show()

# Cek feature untuk KNN
accuracy_list_train = []
k = np.arange(1, 21, 1)
for each in k:
    X_new = SelectKBest(f_classif, k=each).fit_transform(X_train, y_train)
    knn.fit(X_new, y_train)
    accuracy_list_train.append(knn.score(X_new, y_train))

tick = np.arange(0, 21, 1)
plt.figure(figsize=(10, 5))
plt.plot(k, accuracy_list_train, color="green", label="train")
plt.xlabel("k values")
plt.ylabel("train accuracy")
plt.xlim(0, 20)
plt.xticks(tick)
plt.legend()
plt.grid()
plt.show()

